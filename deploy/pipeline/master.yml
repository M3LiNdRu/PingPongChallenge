trigger:
- master

pool:
  vmImage: 'ubuntu-18.04' # examples of other options: 'macOS-10.15', 'windows-2019'

variables:
  BuildConfiguration: 'Release'

stages:
- stage: 
  displayName: 'Build infrastructure'
  jobs:
  - job: 
    displayName: 'Terraform Installer'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Use Terraform latest'

  - job: 
    displayName: 'Terraform Init'
    steps:
    - task: TerraformTaskV1@0
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '4arreplegats - Azure'
        backendAzureRmResourceGroupName: 'Default-Storage-WestEurope'
        backendAzureRmStorageAccountName: '4acmsstorage'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/terraform/'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/terraform/'
        environmentServiceNameAzureRM: '4arreplegats - Azure'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/deploy/terraform/'
        environmentServiceNameAzureRM: '4arreplegats - Azure'
    
- stage: 
  displayName: 'Build'
  jobs:
  - job: 
    displayName: 'Build & Publish'
    steps:
    - task: UseDotNet@2
      inputs:
          version: '3.0.x'
          packageType: runtime

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
            command: 'restore'
            includeNuGetOrg: true

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build $(BuildConfiguration)'
      inputs:
            command: 'build'
            arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish $(BuildConfiguration)'
      inputs:
            command: publish
            publishWebProjects: false
            arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
            zipAfterPublish: true

    # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
    - task: PublishPipelineArtifact@1
      displayName: 'publish pipeline artifact'
      inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)' 
            artifactName: 'PingPongChallenge'
